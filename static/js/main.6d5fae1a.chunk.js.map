{"version":3,"sources":["Components/CourseForm.js","Components/CourseList.js","App.js","serviceWorker.js","index.js"],"names":["CourseForm","props","className","onSubmit","addCourse","type","onChange","updateCourse","value","current","placeholder","CourseList","state","isEdit","renderCourse","info","name","onClick","toggleState","deleteCourse","index","setState","updateForm","e","preventDefault","editCourse","input","renderUpdateForm","ref","v","defaultValue","this","Fragment","Component","App","courses","updateState","target","console","log","length","splice","push","list","map","course","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wMAaeA,EAXI,SAACC,GAChB,OACI,6BACI,0BAAMC,UAAU,UAAUC,SAAUF,EAAMG,WACtC,2BAAOC,KAAK,OAAQC,SAAUL,EAAMM,aAAcC,MAAOP,EAAMQ,QAASC,YAAY,eACrF,4BAAQL,KAAK,SAAUH,UAAU,OAAjC,UCgDAS,E,2MAnDXC,MAAQ,CACJC,QAAO,G,EAEXC,aAAe,WACX,OACI,4BACI,8BAAO,EAAKb,MAAMc,KAAKC,MACvB,4BAAQC,QAAS,WAAO,EAAKC,gBAA7B,eACA,4BAAQD,QAAS,WAAO,EAAKhB,MAAMkB,aAAa,EAAKlB,MAAMmB,SAA3D,mB,EAMZF,YAAc,WAAO,IACZL,EAAQ,EAAKD,MAAbC,OACL,EAAKQ,SAAS,CACVR,QAAQA,K,EAGhBS,WAAW,SAACC,GACRA,EAAEC,iBACF,EAAKvB,MAAMwB,WAAW,EAAKC,MAAMlB,MAAM,EAAKP,MAAMmB,OAClD,EAAKF,e,EAKTS,iBAAmB,WACf,OACI,0BAAMxB,SAAU,EAAKmB,YACjB,2BAAOjB,KAAK,OAAOuB,IAAK,SAACC,GAAM,EAAKH,MAAMG,GAAIC,aAAc,EAAK7B,MAAMc,KAAKC,OAC5E,mD,wEAMF,IACDH,EAAQkB,KAAKnB,MAAbC,OACL,OAEI,kBAAC,IAAMmB,SAAP,KACMnB,EAASkB,KAAKJ,mBAAqBI,KAAKjB,oB,GA5CjCmB,aCkEVC,E,2MAhEbtB,MAAQ,CACNuB,QAAS,CACP,CAAEnB,KAAM,QACR,CAAEA,KAAM,OACR,CAAEA,KAAM,eAEVP,QAAQ,I,EAIV2B,YAAc,SAACb,GAEjB,EAAKF,SAAS,CAACZ,QAAQc,EAAEc,OAAO7B,S,EAGhCW,aAAa,SAACC,GACZkB,QAAQC,IAAInB,GADU,IAEnBe,EAAS,EAAKvB,MAAduB,QACQA,EAAQK,OAErBL,EAAQM,OAAOrB,EAAM,GACrB,EAAKC,SAAS,CAACc,a,EAGb/B,UAAU,SAACmB,GACTA,EAAEC,iBADW,IAEZf,EAAS,EAAKG,MAAdH,QACA0B,EAAS,EAAKvB,MAAduB,QACQ,KAAV1B,IACH0B,EAAQO,KAAK,CAAC1B,KAAKP,IACnB,EAAKY,SAAS,CACZc,UAAQ1B,QAAQ,O,EAGlBgB,WAAW,SAACjB,EAAMY,GAAW,IACtBe,EAAS,EAAKvB,MAAduB,QACMA,EAAQf,GACb,KAASZ,EACf,EAAKa,SAAS,CACZc,a,wEAGQ,IAAD,OAIHQ,EAFgBZ,KAAKnB,MAAjBuB,QAEWS,KAAI,SAACC,EAAQzB,GAC9B,OAAO,kBAAC,EAAD,CAAYL,KAAM8B,EAAQC,IAAK1B,EAAOA,MAAOA,EAAOD,aAAc,EAAKA,aAAcM,WAAY,EAAKA,gBAG/G,OAEE,6BAASvB,UAAU,OAElB,4CACC,kBAAC,EAAD,CAAYO,QAASsB,KAAKnB,MAAMH,QAASF,aAAcwB,KAAKK,YAAahC,UAAW2B,KAAK3B,YAC1F,4BAAKuC,Q,GAzDMV,aCQEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6d5fae1a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CourseForm = (props) =>{\r\n    return(\r\n        <div>\r\n            <form className=\"formAdd\" onSubmit={props.addCourse}>\r\n                <input type=\"text\"  onChange={props.updateCourse} value={props.current} placeholder=\"Add Course\" />\r\n               <button type=\"submit\"  className=\"add\">Add</button>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default CourseForm","import React, { Component } from 'react';\r\n\r\n\r\nclass CourseList extends Component {\r\n    state = {\r\n        isEdit:false\r\n    }\r\n    renderCourse = () => {\r\n        return (\r\n            <li>\r\n                <span>{this.props.info.name}</span>\r\n                <button onClick={() => {this.toggleState()}}>Edit Course</button>\r\n                <button onClick={() =>{ this.props.deleteCourse(this.props.index)}} >Delete Course</button>\r\n            </li>\r\n        )\r\n    }\r\n\r\n    // State \r\n    toggleState = () => {\r\n        let {isEdit}=this.state;\r\n        this.setState({\r\n            isEdit:!isEdit\r\n        })\r\n    }\r\n    updateForm=(e) =>{\r\n        e.preventDefault();\r\n        this.props.editCourse(this.input.value,this.props.index)\r\n        this.toggleState();\r\n    }\r\n\r\n    //Render UpdateForm\r\n\r\n    renderUpdateForm = () => {\r\n        return(\r\n            <form onSubmit={this.updateForm}> \r\n                <input type=\"text\" ref={(v) =>{this.input=v}} defaultValue={this.props.info.name}/>\r\n                <button>Update Course</button>\r\n            </form>\r\n        )\r\n    }\r\n    //edit Course\r\n\r\n    render() {\r\n        let {isEdit}=this.state;\r\n        return (\r\n\r\n            <React.Fragment>\r\n                { isEdit ? this.renderUpdateForm() : this.renderCourse() }\r\n            </React.Fragment>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\nexport default CourseList","import React, { Component } from 'react';\nimport CourseForm from './Components/CourseForm';\nimport CourseList from './Components/CourseList'\n\nclass App extends Component {\n  state = {\n    courses: [\n      { name: 'HTML' },\n      { name: 'CSS' },\n      { name: 'JavaScript' },\n    ],\n    current:\"\"\n  }\n\n  //UpdateCurrentState \n  updateState = (e) =>\n  {\nthis.setState({current:e.target.value})\n  }\n//\ndeleteCourse=(index) => {\n  console.log(index)\nlet {courses}=this.state;\nconst length=courses.length;\n\ncourses.splice(index,1)\nthis.setState({courses});\n}\n\n  addCourse=(e)=>{\n    e.preventDefault();\nlet {current}=this.state;\nlet {courses}=this.state;\nif(current!==\"\"){\ncourses.push({name:current});\nthis.setState({\n  courses,current:\"\" \n})}\n  }\neditCourse=(value,index) => {\n  let {courses}=this.state;\n  let course=courses[index];\n  course[\"name\"]=value;\n  this.setState({\n    courses\n  })\n}\n  render() {\n\n    const { courses } = this.state;\n\n    let list = courses.map((course, index) => {\n      return <CourseList info={course} key={index} index={index} deleteCourse={this.deleteCourse} editCourse={this.editCourse} />\n    })\n\n    return (\n   \n      <section className=\"App\">\n\n       <h2> Course List</h2>\n        <CourseForm current={this.state.current} updateCourse={this.updateState} addCourse={this.addCourse} />\n       <ul>{list}</ul>\n\n      </section>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}